
Test_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b58  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002cec  08002cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d34  08002d34  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002d34  08002d34  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d34  08002d34  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08002dac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002dac  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009eae  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194e  00000000  00000000  00029f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0002b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  0002bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002100c  00000000  00000000  0002c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5d3  00000000  00000000  0004d584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc8aa  00000000  00000000  00057b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00114401  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b1c  00000000  00000000  00114454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002cd4 	.word	0x08002cd4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08002cd4 	.word	0x08002cd4

080001d4 <_ZN8CBlueLedC1Ev>:
 *      Author: Konrad
 */

#include "CBlueLed.h"

CBlueLed::CBlueLed()
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <_ZN8CBlueLedC1Ev+0x1c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
{
}
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4618      	mov	r0, r3
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	08002cf4 	.word	0x08002cf4

080001f4 <_ZN8CBlueLedD1Ev>:

CBlueLed::~CBlueLed()
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <_ZN8CBlueLedD1Ev+0x1c>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	4618      	mov	r0, r3
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	08002cf4 	.word	0x08002cf4

08000214 <_ZN8CBlueLedD0Ev>:
CBlueLed::~CBlueLed()
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
}
 800021c:	6878      	ldr	r0, [r7, #4]
 800021e:	f7ff ffe9 	bl	80001f4 <_ZN8CBlueLedD1Ev>
 8000222:	2104      	movs	r1, #4
 8000224:	6878      	ldr	r0, [r7, #4]
 8000226:	f002 fcbe 	bl	8002ba6 <_ZdlPvj>
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4618      	mov	r0, r3
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <_ZN8CBlueLed8setStateEv>:

void CBlueLed::setState()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	4803      	ldr	r0, [pc, #12]	; (800024c <_ZN8CBlueLed8setStateEv+0x18>)
 8000240:	f000 fd5a 	bl	8000cf8 <HAL_GPIO_TogglePin>
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	48000400 	.word	0x48000400

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b08a      	sub	sp, #40	; 0x28
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0314 	add.w	r3, r7, #20
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000266:	4b34      	ldr	r3, [pc, #208]	; (8000338 <MX_GPIO_Init+0xe8>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a33      	ldr	r2, [pc, #204]	; (8000338 <MX_GPIO_Init+0xe8>)
 800026c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b31      	ldr	r3, [pc, #196]	; (8000338 <MX_GPIO_Init+0xe8>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800027a:	613b      	str	r3, [r7, #16]
 800027c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800027e:	4b2e      	ldr	r3, [pc, #184]	; (8000338 <MX_GPIO_Init+0xe8>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <MX_GPIO_Init+0xe8>)
 8000284:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b2b      	ldr	r3, [pc, #172]	; (8000338 <MX_GPIO_Init+0xe8>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000296:	4b28      	ldr	r3, [pc, #160]	; (8000338 <MX_GPIO_Init+0xe8>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a27      	ldr	r2, [pc, #156]	; (8000338 <MX_GPIO_Init+0xe8>)
 800029c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b25      	ldr	r3, [pc, #148]	; (8000338 <MX_GPIO_Init+0xe8>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	4b22      	ldr	r3, [pc, #136]	; (8000338 <MX_GPIO_Init+0xe8>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a21      	ldr	r2, [pc, #132]	; (8000338 <MX_GPIO_Init+0xe8>)
 80002b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b1f      	ldr	r3, [pc, #124]	; (8000338 <MX_GPIO_Init+0xe8>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	21e0      	movs	r1, #224	; 0xe0
 80002ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ce:	f000 fcfb 	bl	8000cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2140      	movs	r1, #64	; 0x40
 80002d6:	4819      	ldr	r0, [pc, #100]	; (800033c <MX_GPIO_Init+0xec>)
 80002d8:	f000 fcf6 	bl	8000cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e6:	2300      	movs	r3, #0
 80002e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	4619      	mov	r1, r3
 80002f0:	4813      	ldr	r0, [pc, #76]	; (8000340 <MX_GPIO_Init+0xf0>)
 80002f2:	f000 fb5f 	bl	80009b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 80002f6:	23e0      	movs	r3, #224	; 0xe0
 80002f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fa:	2301      	movs	r3, #1
 80002fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	2300      	movs	r3, #0
 8000300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000302:	2300      	movs	r3, #0
 8000304:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000306:	f107 0314 	add.w	r3, r7, #20
 800030a:	4619      	mov	r1, r3
 800030c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000310:	f000 fb50 	bl	80009b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD5_Pin;
 8000314:	2340      	movs	r3, #64	; 0x40
 8000316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000318:	2301      	movs	r3, #1
 800031a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031c:	2300      	movs	r3, #0
 800031e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000320:	2300      	movs	r3, #0
 8000322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 8000324:	f107 0314 	add.w	r3, r7, #20
 8000328:	4619      	mov	r1, r3
 800032a:	4804      	ldr	r0, [pc, #16]	; (800033c <MX_GPIO_Init+0xec>)
 800032c:	f000 fb42 	bl	80009b4 <HAL_GPIO_Init>

}
 8000330:	bf00      	nop
 8000332:	3728      	adds	r7, #40	; 0x28
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40021000 	.word	0x40021000
 800033c:	48000400 	.word	0x48000400
 8000340:	48000800 	.word	0x48000800

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034a:	f000 f9e7 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034e:	f000 f875 	bl	800043c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000352:	f7ff ff7d 	bl	8000250 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000356:	f000 f945 	bl	80005e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  timerLed2 = HAL_GetTick();
 800035a:	f000 fa39 	bl	80007d0 <HAL_GetTick>
 800035e:	4603      	mov	r3, r0
 8000360:	4a30      	ldr	r2, [pc, #192]	; (8000424 <main+0xe0>)
 8000362:	6013      	str	r3, [r2, #0]
  breakTime1 = 1000;
 8000364:	4b30      	ldr	r3, [pc, #192]	; (8000428 <main+0xe4>)
 8000366:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800036a:	801a      	strh	r2, [r3, #0]
  breakTime2 = 2500;
 800036c:	4b2f      	ldr	r3, [pc, #188]	; (800042c <main+0xe8>)
 800036e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000372:	801a      	strh	r2, [r3, #0]
  breakTime3 = 3700;
 8000374:	4b2e      	ldr	r3, [pc, #184]	; (8000430 <main+0xec>)
 8000376:	f640 6274 	movw	r2, #3700	; 0xe74
 800037a:	801a      	strh	r2, [r3, #0]

  CBlueLed bl;
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff28 	bl	80001d4 <_ZN8CBlueLedC1Ev>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if((HAL_GetTick() - timerLed2) > breakTime1)
 8000384:	f000 fa24 	bl	80007d0 <HAL_GetTick>
 8000388:	4602      	mov	r2, r0
 800038a:	4b26      	ldr	r3, [pc, #152]	; (8000424 <main+0xe0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	1ad3      	subs	r3, r2, r3
 8000390:	4a25      	ldr	r2, [pc, #148]	; (8000428 <main+0xe4>)
 8000392:	8812      	ldrh	r2, [r2, #0]
 8000394:	4293      	cmp	r3, r2
 8000396:	bf8c      	ite	hi
 8000398:	2301      	movhi	r3, #1
 800039a:	2300      	movls	r3, #0
 800039c:	b2db      	uxtb	r3, r3
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d009      	beq.n	80003b6 <main+0x72>
	  {
		  timerLed2 = HAL_GetTick();
 80003a2:	f000 fa15 	bl	80007d0 <HAL_GetTick>
 80003a6:	4603      	mov	r3, r0
 80003a8:	4a1e      	ldr	r2, [pc, #120]	; (8000424 <main+0xe0>)
 80003aa:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80003ac:	2120      	movs	r1, #32
 80003ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b2:	f000 fca1 	bl	8000cf8 <HAL_GPIO_TogglePin>
	  }

	  if((HAL_GetTick() - timerLed3) > breakTime2)
 80003b6:	f000 fa0b 	bl	80007d0 <HAL_GetTick>
 80003ba:	4602      	mov	r2, r0
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <main+0xf0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	4a1a      	ldr	r2, [pc, #104]	; (800042c <main+0xe8>)
 80003c4:	8812      	ldrh	r2, [r2, #0]
 80003c6:	4293      	cmp	r3, r2
 80003c8:	bf8c      	ite	hi
 80003ca:	2301      	movhi	r3, #1
 80003cc:	2300      	movls	r3, #0
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d009      	beq.n	80003e8 <main+0xa4>
	  {
		  timerLed3 = HAL_GetTick();
 80003d4:	f000 f9fc 	bl	80007d0 <HAL_GetTick>
 80003d8:	4603      	mov	r3, r0
 80003da:	4a16      	ldr	r2, [pc, #88]	; (8000434 <main+0xf0>)
 80003dc:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80003de:	2140      	movs	r1, #64	; 0x40
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e4:	f000 fc88 	bl	8000cf8 <HAL_GPIO_TogglePin>
	  }

	  if((HAL_GetTick() - timerLed4) > breakTime3)
 80003e8:	f000 f9f2 	bl	80007d0 <HAL_GetTick>
 80003ec:	4602      	mov	r2, r0
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <main+0xf4>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	1ad3      	subs	r3, r2, r3
 80003f4:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <main+0xec>)
 80003f6:	8812      	ldrh	r2, [r2, #0]
 80003f8:	4293      	cmp	r3, r2
 80003fa:	bf8c      	ite	hi
 80003fc:	2301      	movhi	r3, #1
 80003fe:	2300      	movls	r3, #0
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d009      	beq.n	800041a <main+0xd6>
	  {
		  timerLed4 = HAL_GetTick();
 8000406:	f000 f9e3 	bl	80007d0 <HAL_GetTick>
 800040a:	4603      	mov	r3, r0
 800040c:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <main+0xf4>)
 800040e:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000416:	f000 fc6f 	bl	8000cf8 <HAL_GPIO_TogglePin>
	  }

	  //bl.setTimer();
	  //bl.togglePin();

	  bl.setState();
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff09 	bl	8000234 <_ZN8CBlueLed8setStateEv>
	  if((HAL_GetTick() - timerLed2) > breakTime1)
 8000422:	e7af      	b.n	8000384 <main+0x40>
 8000424:	2000008c 	.word	0x2000008c
 8000428:	20000098 	.word	0x20000098
 800042c:	2000009a 	.word	0x2000009a
 8000430:	2000009c 	.word	0x2000009c
 8000434:	20000090 	.word	0x20000090
 8000438:	20000094 	.word	0x20000094

0800043c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b0a6      	sub	sp, #152	; 0x98
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000446:	2228      	movs	r2, #40	; 0x28
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f002 fbdc 	bl	8002c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2258      	movs	r2, #88	; 0x58
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f002 fbce 	bl	8002c08 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046c:	2302      	movs	r3, #2
 800046e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000470:	2301      	movs	r3, #1
 8000472:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000474:	2310      	movs	r3, #16
 8000476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	2302      	movs	r3, #2
 800047c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000488:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800048c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fc46 	bl	8000d2c <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	bf14      	ite	ne
 80004a6:	2301      	movne	r3, #1
 80004a8:	2300      	moveq	r3, #0
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 80004b0:	f000 f832 	bl	8000518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	230f      	movs	r3, #15
 80004b6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	2302      	movs	r3, #2
 80004ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004ce:	2102      	movs	r1, #2
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 fb41 	bl	8001b58 <HAL_RCC_ClockConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	bf14      	ite	ne
 80004dc:	2301      	movne	r3, #1
 80004de:	2300      	moveq	r3, #0
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80004e6:	f000 f817 	bl	8000518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S|RCC_PERIPHCLK_USART2;
 80004ea:	f240 2302 	movw	r3, #514	; 0x202
 80004ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 fd64 	bl	8001fc4 <HAL_RCCEx_PeriphCLKConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bf14      	ite	ne
 8000502:	2301      	movne	r3, #1
 8000504:	2300      	moveq	r3, #0
 8000506:	b2db      	uxtb	r3, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800050c:	f000 f804 	bl	8000518 <Error_Handler>
  }
}
 8000510:	bf00      	nop
 8000512:	3798      	adds	r7, #152	; 0x98
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	e7fe      	b.n	8000520 <Error_Handler+0x8>
	...

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_MspInit+0x44>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <HAL_MspInit+0x44>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <HAL_MspInit+0x44>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <HAL_MspInit+0x44>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <HAL_MspInit+0x44>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_MspInit+0x44>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800055a:	2007      	movs	r0, #7
 800055c:	f000 f9f6 	bl	800094c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000

0800056c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <NMI_Handler+0x4>

08000572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <HardFault_Handler+0x4>

08000578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <MemManage_Handler+0x4>

0800057e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <BusFault_Handler+0x4>

08000584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <UsageFault_Handler+0x4>

0800058a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b8:	f000 f8f6 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <SystemInit+0x20>)
 80005c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ca:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <SystemInit+0x20>)
 80005cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <MX_USART2_UART_Init+0x5c>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_USART2_UART_Init+0x58>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000628:	f001 feea 	bl	8002400 <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000632:	f7ff ff71 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000a4 	.word	0x200000a4
 8000640:	40004400 	.word	0x40004400

08000644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <HAL_UART_MspInit+0x7c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d128      	bne.n	80006b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_UART_MspInit+0x80>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <HAL_UART_MspInit+0x80>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <HAL_UART_MspInit+0x80>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_UART_MspInit+0x80>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <HAL_UART_MspInit+0x80>)
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_UART_MspInit+0x80>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000696:	230c      	movs	r3, #12
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006a6:	2307      	movs	r3, #7
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f000 f97e 	bl	80009b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40004400 	.word	0x40004400
 80006c4:	40021000 	.word	0x40021000

080006c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000700 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ce:	490e      	ldr	r1, [pc, #56]	; (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e4:	4c0b      	ldr	r4, [pc, #44]	; (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f2:	f7ff ff65 	bl	80005c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f6:	f002 fa5b 	bl	8002bb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006fa:	f7ff fe23 	bl	8000344 <main>

080006fe <LoopForever>:

LoopForever:
    b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000700:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800070c:	08002d3c 	.word	0x08002d3c
  ldr r2, =_sbss
 8000710:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000714:	20000138 	.word	0x20000138

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f90d 	bl	800094c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fef4 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f917 	bl	800099a <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 f8ed 	bl	8000962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x20>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_IncTick+0x24>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_IncTick+0x24>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000128 	.word	0x20000128

080007d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <HAL_GetTick+0x14>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20000128 	.word	0x20000128

080007e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <__NVIC_SetPriorityGrouping+0x44>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000804:	4013      	ands	r3, r2
 8000806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <__NVIC_SetPriorityGrouping+0x44>)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	60d3      	str	r3, [r2, #12]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <__NVIC_GetPriorityGrouping+0x18>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	f003 0307 	and.w	r3, r3, #7
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000918:	d301      	bcc.n	800091e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091a:	2301      	movs	r3, #1
 800091c:	e00f      	b.n	800093e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <SysTick_Config+0x40>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000926:	210f      	movs	r1, #15
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f7ff ff8e 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <SysTick_Config+0x40>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <SysTick_Config+0x40>)
 8000938:	2207      	movs	r2, #7
 800093a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ff47 	bl	80007e8 <__NVIC_SetPriorityGrouping>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000974:	f7ff ff5c 	bl	8000830 <__NVIC_GetPriorityGrouping>
 8000978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	6978      	ldr	r0, [r7, #20]
 8000980:	f7ff ff8e 	bl	80008a0 <NVIC_EncodePriority>
 8000984:	4602      	mov	r2, r0
 8000986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff5d 	bl	800084c <__NVIC_SetPriority>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ffb0 	bl	8000908 <SysTick_Config>
 80009a8:	4603      	mov	r3, r0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c2:	e160      	b.n	8000c86 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2101      	movs	r1, #1
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 8152 	beq.w	8000c80 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d005      	beq.n	80009f4 <HAL_GPIO_Init+0x40>
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d130      	bne.n	8000a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	f003 0201 	and.w	r2, r3, #1
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 0303 	and.w	r3, r3, #3
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d017      	beq.n	8000a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d123      	bne.n	8000ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	08da      	lsrs	r2, r3, #3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3208      	adds	r2, #8
 8000aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	691a      	ldr	r2, [r3, #16]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	08da      	lsrs	r2, r3, #3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3208      	adds	r2, #8
 8000ae0:	6939      	ldr	r1, [r7, #16]
 8000ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0203 	and.w	r2, r3, #3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 80ac 	beq.w	8000c80 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b28:	4b5e      	ldr	r3, [pc, #376]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a5d      	ldr	r2, [pc, #372]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b40:	4a59      	ldr	r2, [pc, #356]	; (8000ca8 <HAL_GPIO_Init+0x2f4>)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	3302      	adds	r3, #2
 8000b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	220f      	movs	r2, #15
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b6a:	d025      	beq.n	8000bb8 <HAL_GPIO_Init+0x204>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a4f      	ldr	r2, [pc, #316]	; (8000cac <HAL_GPIO_Init+0x2f8>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d01f      	beq.n	8000bb4 <HAL_GPIO_Init+0x200>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a4e      	ldr	r2, [pc, #312]	; (8000cb0 <HAL_GPIO_Init+0x2fc>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d019      	beq.n	8000bb0 <HAL_GPIO_Init+0x1fc>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a4d      	ldr	r2, [pc, #308]	; (8000cb4 <HAL_GPIO_Init+0x300>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d013      	beq.n	8000bac <HAL_GPIO_Init+0x1f8>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a4c      	ldr	r2, [pc, #304]	; (8000cb8 <HAL_GPIO_Init+0x304>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d00d      	beq.n	8000ba8 <HAL_GPIO_Init+0x1f4>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a4b      	ldr	r2, [pc, #300]	; (8000cbc <HAL_GPIO_Init+0x308>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d007      	beq.n	8000ba4 <HAL_GPIO_Init+0x1f0>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a4a      	ldr	r2, [pc, #296]	; (8000cc0 <HAL_GPIO_Init+0x30c>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d101      	bne.n	8000ba0 <HAL_GPIO_Init+0x1ec>
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	e00c      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	e00a      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	e008      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000ba8:	2304      	movs	r3, #4
 8000baa:	e006      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000bac:	2303      	movs	r3, #3
 8000bae:	e004      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e002      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	f002 0203 	and.w	r2, r2, #3
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	4093      	lsls	r3, r2
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bca:	4937      	ldr	r1, [pc, #220]	; (8000ca8 <HAL_GPIO_Init+0x2f4>)
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bfc:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c26:	4a27      	ldr	r2, [pc, #156]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3301      	adds	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f47f ae97 	bne.w	80009c4 <HAL_GPIO_Init+0x10>
  }
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	371c      	adds	r7, #28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	48000400 	.word	0x48000400
 8000cb0:	48000800 	.word	0x48000800
 8000cb4:	48000c00 	.word	0x48000c00
 8000cb8:	48001000 	.word	0x48001000
 8000cbc:	48001400 	.word	0x48001400
 8000cc0:	48001800 	.word	0x48001800
 8000cc4:	40010400 	.word	0x40010400

08000cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cd8:	787b      	ldrb	r3, [r7, #1]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cde:	887a      	ldrh	r2, [r7, #2]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce4:	e002      	b.n	8000cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ce6:	887a      	ldrh	r2, [r7, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	041a      	lsls	r2, r3, #16
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	43d9      	mvns	r1, r3
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	400b      	ands	r3, r1
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	f000 bf01 	b.w	8001b48 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 8160 	beq.w	8001016 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d56:	4bae      	ldr	r3, [pc, #696]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 030c 	and.w	r3, r3, #12
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	d00c      	beq.n	8000d7c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d62:	4bab      	ldr	r3, [pc, #684]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 030c 	and.w	r3, r3, #12
 8000d6a:	2b08      	cmp	r3, #8
 8000d6c:	d159      	bne.n	8000e22 <HAL_RCC_OscConfig+0xf6>
 8000d6e:	4ba8      	ldr	r3, [pc, #672]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d7a:	d152      	bne.n	8000e22 <HAL_RCC_OscConfig+0xf6>
 8000d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d80:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d84:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d88:	fa93 f3a3 	rbit	r3, r3
 8000d8c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d90:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d94:	fab3 f383 	clz	r3, r3
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d102      	bne.n	8000dae <HAL_RCC_OscConfig+0x82>
 8000da8:	4b99      	ldr	r3, [pc, #612]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	e015      	b.n	8000dda <HAL_RCC_OscConfig+0xae>
 8000dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000dce:	fa93 f3a3 	rbit	r3, r3
 8000dd2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dd6:	4b8e      	ldr	r3, [pc, #568]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dde:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000de2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000de6:	fa92 f2a2 	rbit	r2, r2
 8000dea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000dee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	f042 0220 	orr.w	r2, r2, #32
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	f002 021f 	and.w	r2, r2, #31
 8000e02:	2101      	movs	r1, #1
 8000e04:	fa01 f202 	lsl.w	r2, r1, r2
 8000e08:	4013      	ands	r3, r2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 8102 	beq.w	8001014 <HAL_RCC_OscConfig+0x2e8>
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f040 80fc 	bne.w	8001014 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	f000 be93 	b.w	8001b48 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e2c:	d106      	bne.n	8000e3c <HAL_RCC_OscConfig+0x110>
 8000e2e:	4b78      	ldr	r3, [pc, #480]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a77      	ldr	r2, [pc, #476]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	e030      	b.n	8000e9e <HAL_RCC_OscConfig+0x172>
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x134>
 8000e46:	4b72      	ldr	r3, [pc, #456]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a71      	ldr	r2, [pc, #452]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	4b6f      	ldr	r3, [pc, #444]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a6e      	ldr	r2, [pc, #440]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	e01e      	b.n	8000e9e <HAL_RCC_OscConfig+0x172>
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e6a:	d10c      	bne.n	8000e86 <HAL_RCC_OscConfig+0x15a>
 8000e6c:	4b68      	ldr	r3, [pc, #416]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a67      	ldr	r2, [pc, #412]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	4b65      	ldr	r3, [pc, #404]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a64      	ldr	r2, [pc, #400]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	e00b      	b.n	8000e9e <HAL_RCC_OscConfig+0x172>
 8000e86:	4b62      	ldr	r3, [pc, #392]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a61      	ldr	r2, [pc, #388]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b5f      	ldr	r3, [pc, #380]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a5e      	ldr	r2, [pc, #376]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d059      	beq.n	8000f5c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fc92 	bl	80007d0 <HAL_GetTick>
 8000eac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb0:	e00a      	b.n	8000ec8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb2:	f7ff fc8d 	bl	80007d0 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	; 0x64
 8000ec0:	d902      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	f000 be40 	b.w	8001b48 <HAL_RCC_OscConfig+0xe1c>
 8000ec8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ecc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ed4:	fa93 f3a3 	rbit	r3, r3
 8000ed8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000edc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee0:	fab3 f383 	clz	r3, r3
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d102      	bne.n	8000efa <HAL_RCC_OscConfig+0x1ce>
 8000ef4:	4b46      	ldr	r3, [pc, #280]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	e015      	b.n	8000f26 <HAL_RCC_OscConfig+0x1fa>
 8000efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f02:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f06:	fa93 f3a3 	rbit	r3, r3
 8000f0a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f12:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f16:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f2a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f2e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f32:	fa92 f2a2 	rbit	r2, r2
 8000f36:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f3a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f3e:	fab2 f282 	clz	r2, r2
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	f042 0220 	orr.w	r2, r2, #32
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	f002 021f 	and.w	r2, r2, #31
 8000f4e:	2101      	movs	r1, #1
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0ab      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x186>
 8000f5a:	e05c      	b.n	8001016 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fc38 	bl	80007d0 <HAL_GetTick>
 8000f60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f64:	e00a      	b.n	8000f7c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f66:	f7ff fc33 	bl	80007d0 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b64      	cmp	r3, #100	; 0x64
 8000f74:	d902      	bls.n	8000f7c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	f000 bde6 	b.w	8001b48 <HAL_RCC_OscConfig+0xe1c>
 8000f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f80:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f88:	fa93 f3a3 	rbit	r3, r3
 8000f8c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f90:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f94:	fab3 f383 	clz	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d102      	bne.n	8000fae <HAL_RCC_OscConfig+0x282>
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	e015      	b.n	8000fda <HAL_RCC_OscConfig+0x2ae>
 8000fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000fba:	fa93 f3a3 	rbit	r3, r3
 8000fbe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_RCC_OscConfig+0x2e4>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fde:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000fe2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000fe6:	fa92 f2a2 	rbit	r2, r2
 8000fea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000fee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ff2:	fab2 f282 	clz	r2, r2
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	f042 0220 	orr.w	r2, r2, #32
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	f002 021f 	and.w	r2, r2, #31
 8001002:	2101      	movs	r1, #1
 8001004:	fa01 f202 	lsl.w	r2, r1, r2
 8001008:	4013      	ands	r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1ab      	bne.n	8000f66 <HAL_RCC_OscConfig+0x23a>
 800100e:	e002      	b.n	8001016 <HAL_RCC_OscConfig+0x2ea>
 8001010:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 8170 	beq.w	8001306 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001026:	4bd0      	ldr	r3, [pc, #832]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00c      	beq.n	800104c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001032:	4bcd      	ldr	r3, [pc, #820]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b08      	cmp	r3, #8
 800103c:	d16d      	bne.n	800111a <HAL_RCC_OscConfig+0x3ee>
 800103e:	4bca      	ldr	r3, [pc, #808]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800104a:	d166      	bne.n	800111a <HAL_RCC_OscConfig+0x3ee>
 800104c:	2302      	movs	r3, #2
 800104e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001052:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001056:	fa93 f3a3 	rbit	r3, r3
 800105a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800105e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001062:	fab3 f383 	clz	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	095b      	lsrs	r3, r3, #5
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d102      	bne.n	800107c <HAL_RCC_OscConfig+0x350>
 8001076:	4bbc      	ldr	r3, [pc, #752]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	e013      	b.n	80010a4 <HAL_RCC_OscConfig+0x378>
 800107c:	2302      	movs	r3, #2
 800107e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001082:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800108e:	2302      	movs	r3, #2
 8001090:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001094:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001098:	fa93 f3a3 	rbit	r3, r3
 800109c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010a0:	4bb1      	ldr	r3, [pc, #708]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	2202      	movs	r2, #2
 80010a6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80010aa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80010ae:	fa92 f2a2 	rbit	r2, r2
 80010b2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80010b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010ba:	fab2 f282 	clz	r2, r2
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	f042 0220 	orr.w	r2, r2, #32
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	f002 021f 	and.w	r2, r2, #31
 80010ca:	2101      	movs	r1, #1
 80010cc:	fa01 f202 	lsl.w	r2, r1, r2
 80010d0:	4013      	ands	r3, r2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <HAL_RCC_OscConfig+0x3ba>
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d002      	beq.n	80010e6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	f000 bd31 	b.w	8001b48 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4ba0      	ldr	r3, [pc, #640]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	21f8      	movs	r1, #248	; 0xf8
 80010f6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80010fe:	fa91 f1a1 	rbit	r1, r1
 8001102:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001106:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800110a:	fab1 f181 	clz	r1, r1
 800110e:	b2c9      	uxtb	r1, r1
 8001110:	408b      	lsls	r3, r1
 8001112:	4995      	ldr	r1, [pc, #596]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001118:	e0f5      	b.n	8001306 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 8085 	beq.w	8001230 <HAL_RCC_OscConfig+0x504>
 8001126:	2301      	movs	r3, #1
 8001128:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001138:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800113c:	fab3 f383 	clz	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001146:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	461a      	mov	r2, r3
 800114e:	2301      	movs	r3, #1
 8001150:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fb3d 	bl	80007d0 <HAL_GetTick>
 8001156:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115a:	e00a      	b.n	8001172 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff fb38 	bl	80007d0 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d902      	bls.n	8001172 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	f000 bceb 	b.w	8001b48 <HAL_RCC_OscConfig+0xe1c>
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001184:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	fab3 f383 	clz	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d102      	bne.n	80011a2 <HAL_RCC_OscConfig+0x476>
 800119c:	4b72      	ldr	r3, [pc, #456]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	e013      	b.n	80011ca <HAL_RCC_OscConfig+0x49e>
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011ac:	fa93 f3a3 	rbit	r3, r3
 80011b0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011c6:	4b68      	ldr	r3, [pc, #416]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	2202      	movs	r2, #2
 80011cc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80011d0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011d4:	fa92 f2a2 	rbit	r2, r2
 80011d8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011dc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011e0:	fab2 f282 	clz	r2, r2
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	f042 0220 	orr.w	r2, r2, #32
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	f002 021f 	and.w	r2, r2, #31
 80011f0:	2101      	movs	r1, #1
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0af      	beq.n	800115c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b5a      	ldr	r3, [pc, #360]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	21f8      	movs	r1, #248	; 0xf8
 800120c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001214:	fa91 f1a1 	rbit	r1, r1
 8001218:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800121c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001220:	fab1 f181 	clz	r1, r1
 8001224:	b2c9      	uxtb	r1, r1
 8001226:	408b      	lsls	r3, r1
 8001228:	494f      	ldr	r1, [pc, #316]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
 800122e:	e06a      	b.n	8001306 <HAL_RCC_OscConfig+0x5da>
 8001230:	2301      	movs	r3, #1
 8001232:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001242:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001250:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	461a      	mov	r2, r3
 8001258:	2300      	movs	r3, #0
 800125a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fab8 	bl	80007d0 <HAL_GetTick>
 8001260:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001264:	e00a      	b.n	800127c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fab3 	bl	80007d0 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d902      	bls.n	800127c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	f000 bc66 	b.w	8001b48 <HAL_RCC_OscConfig+0xe1c>
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800128e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	fab3 f383 	clz	r3, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	095b      	lsrs	r3, r3, #5
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d102      	bne.n	80012ac <HAL_RCC_OscConfig+0x580>
 80012a6:	4b30      	ldr	r3, [pc, #192]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	e013      	b.n	80012d4 <HAL_RCC_OscConfig+0x5a8>
 80012ac:	2302      	movs	r3, #2
 80012ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <HAL_RCC_OscConfig+0x63c>)
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	2202      	movs	r2, #2
 80012d6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012da:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012de:	fa92 f2a2 	rbit	r2, r2
 80012e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012ea:	fab2 f282 	clz	r2, r2
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	f042 0220 	orr.w	r2, r2, #32
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	f002 021f 	and.w	r2, r2, #31
 80012fa:	2101      	movs	r1, #1
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	4013      	ands	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1af      	bne.n	8001266 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80da 	beq.w	80014ca <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d069      	beq.n	80013f4 <HAL_RCC_OscConfig+0x6c8>
 8001320:	2301      	movs	r3, #1
 8001322:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001332:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_RCC_OscConfig+0x640>)
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	461a      	mov	r2, r3
 8001346:	2301      	movs	r3, #1
 8001348:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134a:	f7ff fa41 	bl	80007d0 <HAL_GetTick>
 800134e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	e00d      	b.n	8001370 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001354:	f7ff fa3c 	bl	80007d0 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d905      	bls.n	8001370 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e3ef      	b.n	8001b48 <HAL_RCC_OscConfig+0xe1c>
 8001368:	40021000 	.word	0x40021000
 800136c:	10908120 	.word	0x10908120
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800137a:	fa93 f2a3 	rbit	r2, r3
 800137e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001388:	2202      	movs	r2, #2
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	fa93 f2a3 	rbit	r2, r3
 8001396:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013a0:	2202      	movs	r2, #2
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	fa93 f2a3 	rbit	r2, r3
 80013ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b4:	4ba4      	ldr	r3, [pc, #656]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 80013b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013bc:	2102      	movs	r1, #2
 80013be:	6019      	str	r1, [r3, #0]
 80013c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	fa93 f1a3 	rbit	r1, r3
 80013ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013ce:	6019      	str	r1, [r3, #0]
  return result;
 80013d0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f003 031f 	and.w	r3, r3, #31
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0b0      	beq.n	8001354 <HAL_RCC_OscConfig+0x628>
 80013f2:	e06a      	b.n	80014ca <HAL_RCC_OscConfig+0x79e>
 80013f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	fa93 f2a3 	rbit	r2, r3
 8001406:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800140a:	601a      	str	r2, [r3, #0]
  return result;
 800140c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001410:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	4b8c      	ldr	r3, [pc, #560]	; (800164c <HAL_RCC_OscConfig+0x920>)
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	461a      	mov	r2, r3
 8001422:	2300      	movs	r3, #0
 8001424:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff f9d3 	bl	80007d0 <HAL_GetTick>
 800142a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142e:	e009      	b.n	8001444 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff f9ce 	bl	80007d0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e381      	b.n	8001b48 <HAL_RCC_OscConfig+0xe1c>
 8001444:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001448:	2202      	movs	r2, #2
 800144a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	fa93 f2a3 	rbit	r2, r3
 8001456:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001460:	2202      	movs	r2, #2
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	fa93 f2a3 	rbit	r2, r3
 800146e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001478:	2202      	movs	r2, #2
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	fa93 f2a3 	rbit	r2, r3
 8001486:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800148a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b6e      	ldr	r3, [pc, #440]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 800148e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001490:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001494:	2102      	movs	r1, #2
 8001496:	6019      	str	r1, [r3, #0]
 8001498:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	fa93 f1a3 	rbit	r1, r3
 80014a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014a6:	6019      	str	r1, [r3, #0]
  return result;
 80014a8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fab3 f383 	clz	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	2101      	movs	r1, #1
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1b2      	bne.n	8001430 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 8157 	beq.w	8001788 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e0:	4b59      	ldr	r3, [pc, #356]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d112      	bne.n	8001512 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ec:	4b56      	ldr	r3, [pc, #344]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	4a55      	ldr	r2, [pc, #340]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f6:	61d3      	str	r3, [r2, #28]
 80014f8:	4b53      	ldr	r3, [pc, #332]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	4b4f      	ldr	r3, [pc, #316]	; (8001650 <HAL_RCC_OscConfig+0x924>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d11a      	bne.n	8001554 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151e:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <HAL_RCC_OscConfig+0x924>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a4b      	ldr	r2, [pc, #300]	; (8001650 <HAL_RCC_OscConfig+0x924>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152a:	f7ff f951 	bl	80007d0 <HAL_GetTick>
 800152e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001532:	e009      	b.n	8001548 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001534:	f7ff f94c 	bl	80007d0 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b64      	cmp	r3, #100	; 0x64
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e2ff      	b.n	8001b48 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_RCC_OscConfig+0x924>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0ef      	beq.n	8001534 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d106      	bne.n	800156c <HAL_RCC_OscConfig+0x840>
 800155e:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4a39      	ldr	r2, [pc, #228]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6213      	str	r3, [r2, #32]
 800156a:	e02f      	b.n	80015cc <HAL_RCC_OscConfig+0x8a0>
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x864>
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a33      	ldr	r2, [pc, #204]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4a30      	ldr	r2, [pc, #192]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 8001588:	f023 0304 	bic.w	r3, r3, #4
 800158c:	6213      	str	r3, [r2, #32]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0x8a0>
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x888>
 800159a:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a2a      	ldr	r2, [pc, #168]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	4b28      	ldr	r3, [pc, #160]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a27      	ldr	r2, [pc, #156]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x8a0>
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a23      	ldr	r2, [pc, #140]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a20      	ldr	r2, [pc, #128]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d06a      	beq.n	80016ac <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff f8fb 	bl	80007d0 <HAL_GetTick>
 80015da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff f8f6 	bl	80007d0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e2a7      	b.n	8001b48 <HAL_RCC_OscConfig+0xe1c>
 80015f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015fc:	2202      	movs	r2, #2
 80015fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	fa93 f2a3 	rbit	r2, r3
 800160a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001614:	2202      	movs	r2, #2
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fa93 f2a3 	rbit	r2, r3
 8001622:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001626:	601a      	str	r2, [r3, #0]
  return result;
 8001628:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800162c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	095b      	lsrs	r3, r3, #5
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d108      	bne.n	8001654 <HAL_RCC_OscConfig+0x928>
 8001642:	4b01      	ldr	r3, [pc, #4]	; (8001648 <HAL_RCC_OscConfig+0x91c>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	e013      	b.n	8001670 <HAL_RCC_OscConfig+0x944>
 8001648:	40021000 	.word	0x40021000
 800164c:	10908120 	.word	0x10908120
 8001650:	40007000 	.word	0x40007000
 8001654:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	fa93 f2a3 	rbit	r2, r3
 8001666:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	4bc0      	ldr	r3, [pc, #768]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001674:	2102      	movs	r1, #2
 8001676:	6011      	str	r1, [r2, #0]
 8001678:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	fa92 f1a2 	rbit	r1, r2
 8001682:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001686:	6011      	str	r1, [r2, #0]
  return result;
 8001688:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	fab2 f282 	clz	r2, r2
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	f002 021f 	and.w	r2, r2, #31
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d09a      	beq.n	80015e0 <HAL_RCC_OscConfig+0x8b4>
 80016aa:	e063      	b.n	8001774 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff f890 	bl	80007d0 <HAL_GetTick>
 80016b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff f88b 	bl	80007d0 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e23c      	b.n	8001b48 <HAL_RCC_OscConfig+0xe1c>
 80016ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016d2:	2202      	movs	r2, #2
 80016d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fa93 f2a3 	rbit	r2, r3
 80016e0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016ea:	2202      	movs	r2, #2
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fa93 f2a3 	rbit	r2, r3
 80016f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016fc:	601a      	str	r2, [r3, #0]
  return result;
 80016fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001702:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d102      	bne.n	800171e <HAL_RCC_OscConfig+0x9f2>
 8001718:	4b95      	ldr	r3, [pc, #596]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	e00d      	b.n	800173a <HAL_RCC_OscConfig+0xa0e>
 800171e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001722:	2202      	movs	r2, #2
 8001724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	fa93 f2a3 	rbit	r2, r3
 8001730:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	4b8e      	ldr	r3, [pc, #568]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800173e:	2102      	movs	r1, #2
 8001740:	6011      	str	r1, [r2, #0]
 8001742:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	fa92 f1a2 	rbit	r1, r2
 800174c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001750:	6011      	str	r1, [r2, #0]
  return result;
 8001752:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	fab2 f282 	clz	r2, r2
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	f002 021f 	and.w	r2, r2, #31
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1a0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001774:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	4a7b      	ldr	r2, [pc, #492]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 8001782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001786:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 81d9 	beq.w	8001b46 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001794:	4b76      	ldr	r3, [pc, #472]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	f000 81a6 	beq.w	8001aee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	f040 811e 	bne.w	80019ea <HAL_RCC_OscConfig+0xcbe>
 80017ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	fa93 f2a3 	rbit	r2, r3
 80017c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017c6:	601a      	str	r2, [r3, #0]
  return result;
 80017c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	461a      	mov	r2, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7fe fff4 	bl	80007d0 <HAL_GetTick>
 80017e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ec:	e009      	b.n	8001802 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ee:	f7fe ffef 	bl	80007d0 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e1a2      	b.n	8001b48 <HAL_RCC_OscConfig+0xe1c>
 8001802:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001806:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800180a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f2a3 	rbit	r2, r3
 8001816:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800181a:	601a      	str	r2, [r3, #0]
  return result;
 800181c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001820:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	095b      	lsrs	r3, r3, #5
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d102      	bne.n	800183c <HAL_RCC_OscConfig+0xb10>
 8001836:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	e01b      	b.n	8001874 <HAL_RCC_OscConfig+0xb48>
 800183c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	fa93 f2a3 	rbit	r2, r3
 8001850:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800185a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	fa93 f2a3 	rbit	r2, r3
 800186a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001878:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800187c:	6011      	str	r1, [r2, #0]
 800187e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	fa92 f1a2 	rbit	r1, r2
 8001888:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800188c:	6011      	str	r1, [r2, #0]
  return result;
 800188e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	fab2 f282 	clz	r2, r2
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	f042 0220 	orr.w	r2, r2, #32
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	f002 021f 	and.w	r2, r2, #31
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f202 	lsl.w	r2, r1, r2
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d19e      	bne.n	80017ee <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b0:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	f023 020f 	bic.w	r2, r3, #15
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	492c      	ldr	r1, [pc, #176]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6a19      	ldr	r1, [r3, #32]
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	430b      	orrs	r3, r1
 80018da:	4925      	ldr	r1, [pc, #148]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
 80018e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fa93 f2a3 	rbit	r2, r3
 80018f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f8:	601a      	str	r2, [r3, #0]
  return result;
 80018fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018fe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800190a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	461a      	mov	r2, r3
 8001912:	2301      	movs	r3, #1
 8001914:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7fe ff5b 	bl	80007d0 <HAL_GetTick>
 800191a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800191e:	e009      	b.n	8001934 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7fe ff56 	bl	80007d0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e109      	b.n	8001b48 <HAL_RCC_OscConfig+0xe1c>
 8001934:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001938:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800193c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800194c:	601a      	str	r2, [r3, #0]
  return result;
 800194e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001952:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0xc48>
 8001968:	4b01      	ldr	r3, [pc, #4]	; (8001970 <HAL_RCC_OscConfig+0xc44>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	e01e      	b.n	80019ac <HAL_RCC_OscConfig+0xc80>
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001978:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800197c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001992:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fa93 f2a3 	rbit	r2, r3
 80019a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <HAL_RCC_OscConfig+0xe28>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019b4:	6011      	str	r1, [r2, #0]
 80019b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	fa92 f1a2 	rbit	r1, r2
 80019c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019c4:	6011      	str	r1, [r2, #0]
  return result;
 80019c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	fab2 f282 	clz	r2, r2
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	f042 0220 	orr.w	r2, r2, #32
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	f002 021f 	and.w	r2, r2, #31
 80019dc:	2101      	movs	r1, #1
 80019de:	fa01 f202 	lsl.w	r2, r1, r2
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d09b      	beq.n	8001920 <HAL_RCC_OscConfig+0xbf4>
 80019e8:	e0ad      	b.n	8001b46 <HAL_RCC_OscConfig+0xe1a>
 80019ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a02:	601a      	str	r2, [r3, #0]
  return result;
 8001a04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a08:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7fe fed6 	bl	80007d0 <HAL_GetTick>
 8001a24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a28:	e009      	b.n	8001a3e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7fe fed1 	bl	80007d0 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e084      	b.n	8001b48 <HAL_RCC_OscConfig+0xe1c>
 8001a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	fa93 f2a3 	rbit	r2, r3
 8001a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a56:	601a      	str	r2, [r3, #0]
  return result;
 8001a58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_OscConfig+0xd4c>
 8001a72:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <HAL_RCC_OscConfig+0xe28>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e01b      	b.n	8001ab0 <HAL_RCC_OscConfig+0xd84>
 8001a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	fa93 f2a3 	rbit	r2, r3
 8001a8c:	f107 0320 	add.w	r3, r7, #32
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f2a3 	rbit	r2, r3
 8001aa6:	f107 0318 	add.w	r3, r7, #24
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <HAL_RCC_OscConfig+0xe28>)
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	f107 0214 	add.w	r2, r7, #20
 8001ab4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ab8:	6011      	str	r1, [r2, #0]
 8001aba:	f107 0214 	add.w	r2, r7, #20
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	fa92 f1a2 	rbit	r1, r2
 8001ac4:	f107 0210 	add.w	r2, r7, #16
 8001ac8:	6011      	str	r1, [r2, #0]
  return result;
 8001aca:	f107 0210 	add.w	r2, r7, #16
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	fab2 f282 	clz	r2, r2
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	f042 0220 	orr.w	r2, r2, #32
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	f002 021f 	and.w	r2, r2, #31
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d19e      	bne.n	8001a2a <HAL_RCC_OscConfig+0xcfe>
 8001aec:	e02b      	b.n	8001b46 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e025      	b.n	8001b48 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_RCC_OscConfig+0xe28>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_RCC_OscConfig+0xe28>)
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b10:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d111      	bne.n	8001b42 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d108      	bne.n	8001b42 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b34:	f003 020f 	and.w	r2, r3, #15
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000

08001b58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b09e      	sub	sp, #120	; 0x78
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e162      	b.n	8001e36 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b90      	ldr	r3, [pc, #576]	; (8001db4 <HAL_RCC_ClockConfig+0x25c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d910      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b8d      	ldr	r3, [pc, #564]	; (8001db4 <HAL_RCC_ClockConfig+0x25c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	498b      	ldr	r1, [pc, #556]	; (8001db4 <HAL_RCC_ClockConfig+0x25c>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b89      	ldr	r3, [pc, #548]	; (8001db4 <HAL_RCC_ClockConfig+0x25c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e14a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bac:	4b82      	ldr	r3, [pc, #520]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	497f      	ldr	r1, [pc, #508]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80dc 	beq.w	8001d84 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d13c      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xf6>
 8001bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d102      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xa6>
 8001bf8:	4b6f      	ldr	r3, [pc, #444]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	e00f      	b.n	8001c1e <HAL_RCC_ClockConfig+0xc6>
 8001bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	667b      	str	r3, [r7, #100]	; 0x64
 8001c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c10:	663b      	str	r3, [r7, #96]	; 0x60
 8001c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c1a:	4b67      	ldr	r3, [pc, #412]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c22:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c26:	fa92 f2a2 	rbit	r2, r2
 8001c2a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c2e:	fab2 f282 	clz	r2, r2
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f042 0220 	orr.w	r2, r2, #32
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	f002 021f 	and.w	r2, r2, #31
 8001c3e:	2101      	movs	r1, #1
 8001c40:	fa01 f202 	lsl.w	r2, r1, r2
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d17b      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0f3      	b.n	8001e36 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d13c      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x178>
 8001c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	095b      	lsrs	r3, r3, #5
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d102      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x128>
 8001c7a:	4b4f      	ldr	r3, [pc, #316]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	e00f      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x148>
 8001c80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8001c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
 8001c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c9c:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ca8:	fa92 f2a2 	rbit	r2, r2
 8001cac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cb0:	fab2 f282 	clz	r2, r2
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f042 0220 	orr.w	r2, r2, #32
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f002 021f 	and.w	r2, r2, #31
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d13a      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0b2      	b.n	8001e36 <HAL_RCC_ClockConfig+0x2de>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	095b      	lsrs	r3, r3, #5
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x1a0>
 8001cf2:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	e00d      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1bc>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	2302      	movs	r3, #2
 8001d06:	623b      	str	r3, [r7, #32]
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	2202      	movs	r2, #2
 8001d16:	61ba      	str	r2, [r7, #24]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	fa92 f2a2 	rbit	r2, r2
 8001d1e:	617a      	str	r2, [r7, #20]
  return result;
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	fab2 f282 	clz	r2, r2
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f042 0220 	orr.w	r2, r2, #32
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	f002 021f 	and.w	r2, r2, #31
 8001d32:	2101      	movs	r1, #1
 8001d34:	fa01 f202 	lsl.w	r2, r1, r2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e079      	b.n	8001e36 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f023 0203 	bic.w	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	491a      	ldr	r1, [pc, #104]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d54:	f7fe fd3c 	bl	80007d0 <HAL_GetTick>
 8001d58:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7fe fd38 	bl	80007d0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e061      	b.n	8001e36 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 020c 	and.w	r2, r3, #12
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d1eb      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_ClockConfig+0x25c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d214      	bcs.n	8001dbc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_RCC_ClockConfig+0x25c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	4906      	ldr	r1, [pc, #24]	; (8001db4 <HAL_RCC_ClockConfig+0x25c>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <HAL_RCC_ClockConfig+0x25c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e040      	b.n	8001e36 <HAL_RCC_ClockConfig+0x2de>
 8001db4:	40022000 	.word	0x40022000
 8001db8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCC_ClockConfig+0x2e8>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	491a      	ldr	r1, [pc, #104]	; (8001e40 <HAL_RCC_ClockConfig+0x2e8>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_RCC_ClockConfig+0x2e8>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4912      	ldr	r1, [pc, #72]	; (8001e40 <HAL_RCC_ClockConfig+0x2e8>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dfa:	f000 f829 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001dfe:	4601      	mov	r1, r0
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <HAL_RCC_ClockConfig+0x2e8>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e08:	22f0      	movs	r2, #240	; 0xf0
 8001e0a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	fa92 f2a2 	rbit	r2, r2
 8001e12:	60fa      	str	r2, [r7, #12]
  return result;
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	fab2 f282 	clz	r2, r2
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	40d3      	lsrs	r3, r2
 8001e1e:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <HAL_RCC_ClockConfig+0x2ec>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	fa21 f303 	lsr.w	r3, r1, r3
 8001e26:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <HAL_RCC_ClockConfig+0x2f0>)
 8001e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_RCC_ClockConfig+0x2f4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fc8a 	bl	8000748 <HAL_InitTick>
  
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3778      	adds	r7, #120	; 0x78
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	08002cfc 	.word	0x08002cfc
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b08b      	sub	sp, #44	; 0x2c
 8001e54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d002      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x30>
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d003      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0x36>
 8001e7e:	e03f      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e80:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e82:	623b      	str	r3, [r7, #32]
      break;
 8001e84:	e03f      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e8c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e90:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	fa92 f2a2 	rbit	r2, r2
 8001e98:	607a      	str	r2, [r7, #4]
  return result;
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	fab2 f282 	clz	r2, r2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	40d3      	lsrs	r3, r2
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	fa92 f2a2 	rbit	r2, r2
 8001ebc:	60fa      	str	r2, [r7, #12]
  return result;
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	fab2 f282 	clz	r2, r2
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	40d3      	lsrs	r3, r2
 8001ec8:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ed8:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee8:	e007      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	623b      	str	r3, [r7, #32]
      break;
 8001efe:	e002      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f02:	623b      	str	r3, [r7, #32]
      break;
 8001f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f06:	6a3b      	ldr	r3, [r7, #32]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	372c      	adds	r7, #44	; 0x2c
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40021000 	.word	0x40021000
 8001f18:	007a1200 	.word	0x007a1200
 8001f1c:	08002d14 	.word	0x08002d14
 8001f20:	08002d24 	.word	0x08002d24

08001f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000000 	.word	0x20000000

08001f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f42:	f7ff ffef 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f46:	4601      	mov	r1, r0
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f50:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	fa92 f2a2 	rbit	r2, r2
 8001f5c:	603a      	str	r2, [r7, #0]
  return result;
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	fab2 f282 	clz	r2, r2
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	40d3      	lsrs	r3, r2
 8001f68:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	08002d0c 	.word	0x08002d0c

08001f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f86:	f7ff ffcd 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f8a:	4601      	mov	r1, r0
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f94:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	fa92 f2a2 	rbit	r2, r2
 8001fa0:	603a      	str	r2, [r7, #0]
  return result;
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	fab2 f282 	clz	r2, r2
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	40d3      	lsrs	r3, r2
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	08002d0c 	.word	0x08002d0c

08001fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b092      	sub	sp, #72	; 0x48
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80d4 	beq.w	8002190 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe8:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10e      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	4a4a      	ldr	r2, [pc, #296]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	61d3      	str	r3, [r2, #28]
 8002000:	4b48      	ldr	r3, [pc, #288]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200c:	2301      	movs	r3, #1
 800200e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002012:	4b45      	ldr	r3, [pc, #276]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d118      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201e:	4b42      	ldr	r3, [pc, #264]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a41      	ldr	r2, [pc, #260]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002028:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202a:	f7fe fbd1 	bl	80007d0 <HAL_GetTick>
 800202e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	e008      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002032:	f7fe fbcd 	bl	80007d0 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b64      	cmp	r3, #100	; 0x64
 800203e:	d901      	bls.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e1d6      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	4b38      	ldr	r3, [pc, #224]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002050:	4b34      	ldr	r3, [pc, #208]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002058:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800205a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8084 	beq.w	800216a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800206c:	429a      	cmp	r2, r3
 800206e:	d07c      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002070:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	461a      	mov	r2, r3
 800209a:	2301      	movs	r3, #1
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	461a      	mov	r2, r3
 80020be:	2300      	movs	r3, #0
 80020c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d04b      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7fe fb7d 	bl	80007d0 <HAL_GetTick>
 80020d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7fe fb79 	bl	80007d0 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e180      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80020f0:	2302      	movs	r3, #2
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
 80020fc:	2302      	movs	r3, #2
 80020fe:	623b      	str	r3, [r7, #32]
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	61fb      	str	r3, [r7, #28]
  return result;
 8002108:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d108      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800211e:	4b01      	ldr	r3, [pc, #4]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	e00d      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002124:	40021000 	.word	0x40021000
 8002128:	40007000 	.word	0x40007000
 800212c:	10908100 	.word	0x10908100
 8002130:	2302      	movs	r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	4ba0      	ldr	r3, [pc, #640]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	2202      	movs	r2, #2
 8002142:	613a      	str	r2, [r7, #16]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	fa92 f2a2 	rbit	r2, r2
 800214a:	60fa      	str	r2, [r7, #12]
  return result;
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	fab2 f282 	clz	r2, r2
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	f002 021f 	and.w	r2, r2, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f202 	lsl.w	r2, r1, r2
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0b7      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800216a:	4b95      	ldr	r3, [pc, #596]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4992      	ldr	r1, [pc, #584]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002178:	4313      	orrs	r3, r2
 800217a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800217c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002184:	4b8e      	ldr	r3, [pc, #568]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	4a8d      	ldr	r2, [pc, #564]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800218a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800219c:	4b88      	ldr	r3, [pc, #544]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	f023 0203 	bic.w	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4985      	ldr	r1, [pc, #532]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021ba:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	497e      	ldr	r1, [pc, #504]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021d8:	4b79      	ldr	r3, [pc, #484]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	4976      	ldr	r1, [pc, #472]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d008      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f6:	4b72      	ldr	r3, [pc, #456]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f023 0210 	bic.w	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	496f      	ldr	r1, [pc, #444]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002204:	4313      	orrs	r3, r2
 8002206:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002214:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	4967      	ldr	r1, [pc, #412]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002232:	4b63      	ldr	r3, [pc, #396]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f023 0220 	bic.w	r2, r3, #32
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4960      	ldr	r1, [pc, #384]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002240:	4313      	orrs	r3, r2
 8002242:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002250:	4b5b      	ldr	r3, [pc, #364]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	4958      	ldr	r1, [pc, #352]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d008      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800226e:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4951      	ldr	r1, [pc, #324]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800227c:	4313      	orrs	r3, r2
 800227e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800228c:	4b4c      	ldr	r3, [pc, #304]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	4949      	ldr	r1, [pc, #292]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022aa:	4b45      	ldr	r3, [pc, #276]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4942      	ldr	r1, [pc, #264]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022c8:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	493a      	ldr	r1, [pc, #232]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80022e6:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	4933      	ldr	r1, [pc, #204]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002304:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002310:	492b      	ldr	r1, [pc, #172]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002322:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4924      	ldr	r1, [pc, #144]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002330:	4313      	orrs	r3, r2
 8002332:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002340:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	491c      	ldr	r1, [pc, #112]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	4915      	ldr	r1, [pc, #84]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800237c:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	490d      	ldr	r1, [pc, #52]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a6:	4906      	ldr	r1, [pc, #24]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00c      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80023b8:	4b01      	ldr	r3, [pc, #4]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	e002      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023cc:	490b      	ldr	r1, [pc, #44]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ea:	4904      	ldr	r1, [pc, #16]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3748      	adds	r7, #72	; 0x48
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e040      	b.n	8002494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe f90e 	bl	8000644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	; 0x24
 800242c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f82c 	bl	800249c <UART_SetConfig>
 8002444:	4603      	mov	r3, r0
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e022      	b.n	8002494 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f9f6 	bl	8002848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800246a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800247a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 fa7d 	bl	800298c <UART_CheckIdleState>
 8002492:	4603      	mov	r3, r0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4bab      	ldr	r3, [pc, #684]	; (8002774 <UART_SetConfig+0x2d8>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	6979      	ldr	r1, [r7, #20]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a99      	ldr	r2, [pc, #612]	; (8002778 <UART_SetConfig+0x2dc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d120      	bne.n	800255a <UART_SetConfig+0xbe>
 8002518:	4b98      	ldr	r3, [pc, #608]	; (800277c <UART_SetConfig+0x2e0>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b03      	cmp	r3, #3
 8002522:	d817      	bhi.n	8002554 <UART_SetConfig+0xb8>
 8002524:	a201      	add	r2, pc, #4	; (adr r2, 800252c <UART_SetConfig+0x90>)
 8002526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252a:	bf00      	nop
 800252c:	0800253d 	.word	0x0800253d
 8002530:	08002549 	.word	0x08002549
 8002534:	0800254f 	.word	0x0800254f
 8002538:	08002543 	.word	0x08002543
 800253c:	2301      	movs	r3, #1
 800253e:	77fb      	strb	r3, [r7, #31]
 8002540:	e0b5      	b.n	80026ae <UART_SetConfig+0x212>
 8002542:	2302      	movs	r3, #2
 8002544:	77fb      	strb	r3, [r7, #31]
 8002546:	e0b2      	b.n	80026ae <UART_SetConfig+0x212>
 8002548:	2304      	movs	r3, #4
 800254a:	77fb      	strb	r3, [r7, #31]
 800254c:	e0af      	b.n	80026ae <UART_SetConfig+0x212>
 800254e:	2308      	movs	r3, #8
 8002550:	77fb      	strb	r3, [r7, #31]
 8002552:	e0ac      	b.n	80026ae <UART_SetConfig+0x212>
 8002554:	2310      	movs	r3, #16
 8002556:	77fb      	strb	r3, [r7, #31]
 8002558:	e0a9      	b.n	80026ae <UART_SetConfig+0x212>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a88      	ldr	r2, [pc, #544]	; (8002780 <UART_SetConfig+0x2e4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d124      	bne.n	80025ae <UART_SetConfig+0x112>
 8002564:	4b85      	ldr	r3, [pc, #532]	; (800277c <UART_SetConfig+0x2e0>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800256c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002570:	d011      	beq.n	8002596 <UART_SetConfig+0xfa>
 8002572:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002576:	d817      	bhi.n	80025a8 <UART_SetConfig+0x10c>
 8002578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800257c:	d011      	beq.n	80025a2 <UART_SetConfig+0x106>
 800257e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002582:	d811      	bhi.n	80025a8 <UART_SetConfig+0x10c>
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <UART_SetConfig+0xf4>
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d006      	beq.n	800259c <UART_SetConfig+0x100>
 800258e:	e00b      	b.n	80025a8 <UART_SetConfig+0x10c>
 8002590:	2300      	movs	r3, #0
 8002592:	77fb      	strb	r3, [r7, #31]
 8002594:	e08b      	b.n	80026ae <UART_SetConfig+0x212>
 8002596:	2302      	movs	r3, #2
 8002598:	77fb      	strb	r3, [r7, #31]
 800259a:	e088      	b.n	80026ae <UART_SetConfig+0x212>
 800259c:	2304      	movs	r3, #4
 800259e:	77fb      	strb	r3, [r7, #31]
 80025a0:	e085      	b.n	80026ae <UART_SetConfig+0x212>
 80025a2:	2308      	movs	r3, #8
 80025a4:	77fb      	strb	r3, [r7, #31]
 80025a6:	e082      	b.n	80026ae <UART_SetConfig+0x212>
 80025a8:	2310      	movs	r3, #16
 80025aa:	77fb      	strb	r3, [r7, #31]
 80025ac:	e07f      	b.n	80026ae <UART_SetConfig+0x212>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a74      	ldr	r2, [pc, #464]	; (8002784 <UART_SetConfig+0x2e8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d124      	bne.n	8002602 <UART_SetConfig+0x166>
 80025b8:	4b70      	ldr	r3, [pc, #448]	; (800277c <UART_SetConfig+0x2e0>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80025c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025c4:	d011      	beq.n	80025ea <UART_SetConfig+0x14e>
 80025c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025ca:	d817      	bhi.n	80025fc <UART_SetConfig+0x160>
 80025cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025d0:	d011      	beq.n	80025f6 <UART_SetConfig+0x15a>
 80025d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025d6:	d811      	bhi.n	80025fc <UART_SetConfig+0x160>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <UART_SetConfig+0x148>
 80025dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025e0:	d006      	beq.n	80025f0 <UART_SetConfig+0x154>
 80025e2:	e00b      	b.n	80025fc <UART_SetConfig+0x160>
 80025e4:	2300      	movs	r3, #0
 80025e6:	77fb      	strb	r3, [r7, #31]
 80025e8:	e061      	b.n	80026ae <UART_SetConfig+0x212>
 80025ea:	2302      	movs	r3, #2
 80025ec:	77fb      	strb	r3, [r7, #31]
 80025ee:	e05e      	b.n	80026ae <UART_SetConfig+0x212>
 80025f0:	2304      	movs	r3, #4
 80025f2:	77fb      	strb	r3, [r7, #31]
 80025f4:	e05b      	b.n	80026ae <UART_SetConfig+0x212>
 80025f6:	2308      	movs	r3, #8
 80025f8:	77fb      	strb	r3, [r7, #31]
 80025fa:	e058      	b.n	80026ae <UART_SetConfig+0x212>
 80025fc:	2310      	movs	r3, #16
 80025fe:	77fb      	strb	r3, [r7, #31]
 8002600:	e055      	b.n	80026ae <UART_SetConfig+0x212>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a60      	ldr	r2, [pc, #384]	; (8002788 <UART_SetConfig+0x2ec>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d124      	bne.n	8002656 <UART_SetConfig+0x1ba>
 800260c:	4b5b      	ldr	r3, [pc, #364]	; (800277c <UART_SetConfig+0x2e0>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002614:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002618:	d011      	beq.n	800263e <UART_SetConfig+0x1a2>
 800261a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800261e:	d817      	bhi.n	8002650 <UART_SetConfig+0x1b4>
 8002620:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002624:	d011      	beq.n	800264a <UART_SetConfig+0x1ae>
 8002626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800262a:	d811      	bhi.n	8002650 <UART_SetConfig+0x1b4>
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <UART_SetConfig+0x19c>
 8002630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002634:	d006      	beq.n	8002644 <UART_SetConfig+0x1a8>
 8002636:	e00b      	b.n	8002650 <UART_SetConfig+0x1b4>
 8002638:	2300      	movs	r3, #0
 800263a:	77fb      	strb	r3, [r7, #31]
 800263c:	e037      	b.n	80026ae <UART_SetConfig+0x212>
 800263e:	2302      	movs	r3, #2
 8002640:	77fb      	strb	r3, [r7, #31]
 8002642:	e034      	b.n	80026ae <UART_SetConfig+0x212>
 8002644:	2304      	movs	r3, #4
 8002646:	77fb      	strb	r3, [r7, #31]
 8002648:	e031      	b.n	80026ae <UART_SetConfig+0x212>
 800264a:	2308      	movs	r3, #8
 800264c:	77fb      	strb	r3, [r7, #31]
 800264e:	e02e      	b.n	80026ae <UART_SetConfig+0x212>
 8002650:	2310      	movs	r3, #16
 8002652:	77fb      	strb	r3, [r7, #31]
 8002654:	e02b      	b.n	80026ae <UART_SetConfig+0x212>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a4c      	ldr	r2, [pc, #304]	; (800278c <UART_SetConfig+0x2f0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d124      	bne.n	80026aa <UART_SetConfig+0x20e>
 8002660:	4b46      	ldr	r3, [pc, #280]	; (800277c <UART_SetConfig+0x2e0>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002668:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800266c:	d011      	beq.n	8002692 <UART_SetConfig+0x1f6>
 800266e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002672:	d817      	bhi.n	80026a4 <UART_SetConfig+0x208>
 8002674:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002678:	d011      	beq.n	800269e <UART_SetConfig+0x202>
 800267a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800267e:	d811      	bhi.n	80026a4 <UART_SetConfig+0x208>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <UART_SetConfig+0x1f0>
 8002684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002688:	d006      	beq.n	8002698 <UART_SetConfig+0x1fc>
 800268a:	e00b      	b.n	80026a4 <UART_SetConfig+0x208>
 800268c:	2300      	movs	r3, #0
 800268e:	77fb      	strb	r3, [r7, #31]
 8002690:	e00d      	b.n	80026ae <UART_SetConfig+0x212>
 8002692:	2302      	movs	r3, #2
 8002694:	77fb      	strb	r3, [r7, #31]
 8002696:	e00a      	b.n	80026ae <UART_SetConfig+0x212>
 8002698:	2304      	movs	r3, #4
 800269a:	77fb      	strb	r3, [r7, #31]
 800269c:	e007      	b.n	80026ae <UART_SetConfig+0x212>
 800269e:	2308      	movs	r3, #8
 80026a0:	77fb      	strb	r3, [r7, #31]
 80026a2:	e004      	b.n	80026ae <UART_SetConfig+0x212>
 80026a4:	2310      	movs	r3, #16
 80026a6:	77fb      	strb	r3, [r7, #31]
 80026a8:	e001      	b.n	80026ae <UART_SetConfig+0x212>
 80026aa:	2310      	movs	r3, #16
 80026ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b6:	d16d      	bne.n	8002794 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 80026b8:	7ffb      	ldrb	r3, [r7, #31]
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d827      	bhi.n	800270e <UART_SetConfig+0x272>
 80026be:	a201      	add	r2, pc, #4	; (adr r2, 80026c4 <UART_SetConfig+0x228>)
 80026c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c4:	080026e9 	.word	0x080026e9
 80026c8:	080026f1 	.word	0x080026f1
 80026cc:	080026f9 	.word	0x080026f9
 80026d0:	0800270f 	.word	0x0800270f
 80026d4:	080026ff 	.word	0x080026ff
 80026d8:	0800270f 	.word	0x0800270f
 80026dc:	0800270f 	.word	0x0800270f
 80026e0:	0800270f 	.word	0x0800270f
 80026e4:	08002707 	.word	0x08002707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026e8:	f7ff fc28 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 80026ec:	61b8      	str	r0, [r7, #24]
        break;
 80026ee:	e013      	b.n	8002718 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026f0:	f7ff fc46 	bl	8001f80 <HAL_RCC_GetPCLK2Freq>
 80026f4:	61b8      	str	r0, [r7, #24]
        break;
 80026f6:	e00f      	b.n	8002718 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <UART_SetConfig+0x2f4>)
 80026fa:	61bb      	str	r3, [r7, #24]
        break;
 80026fc:	e00c      	b.n	8002718 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026fe:	f7ff fba7 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002702:	61b8      	str	r0, [r7, #24]
        break;
 8002704:	e008      	b.n	8002718 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270a:	61bb      	str	r3, [r7, #24]
        break;
 800270c:	e004      	b.n	8002718 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	77bb      	strb	r3, [r7, #30]
        break;
 8002716:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8086 	beq.w	800282c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	005a      	lsls	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	441a      	add	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	b29b      	uxth	r3, r3
 8002736:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	d916      	bls.n	800276c <UART_SetConfig+0x2d0>
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002744:	d212      	bcs.n	800276c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	b29b      	uxth	r3, r3
 800274a:	f023 030f 	bic.w	r3, r3, #15
 800274e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	b29b      	uxth	r3, r3
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	b29a      	uxth	r2, r3
 800275c:	89fb      	ldrh	r3, [r7, #14]
 800275e:	4313      	orrs	r3, r2
 8002760:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	89fa      	ldrh	r2, [r7, #14]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	e05f      	b.n	800282c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	77bb      	strb	r3, [r7, #30]
 8002770:	e05c      	b.n	800282c <UART_SetConfig+0x390>
 8002772:	bf00      	nop
 8002774:	efff69f3 	.word	0xefff69f3
 8002778:	40013800 	.word	0x40013800
 800277c:	40021000 	.word	0x40021000
 8002780:	40004400 	.word	0x40004400
 8002784:	40004800 	.word	0x40004800
 8002788:	40004c00 	.word	0x40004c00
 800278c:	40005000 	.word	0x40005000
 8002790:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002794:	7ffb      	ldrb	r3, [r7, #31]
 8002796:	2b08      	cmp	r3, #8
 8002798:	d827      	bhi.n	80027ea <UART_SetConfig+0x34e>
 800279a:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <UART_SetConfig+0x304>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027c5 	.word	0x080027c5
 80027a4:	080027cd 	.word	0x080027cd
 80027a8:	080027d5 	.word	0x080027d5
 80027ac:	080027eb 	.word	0x080027eb
 80027b0:	080027db 	.word	0x080027db
 80027b4:	080027eb 	.word	0x080027eb
 80027b8:	080027eb 	.word	0x080027eb
 80027bc:	080027eb 	.word	0x080027eb
 80027c0:	080027e3 	.word	0x080027e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027c4:	f7ff fbba 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 80027c8:	61b8      	str	r0, [r7, #24]
        break;
 80027ca:	e013      	b.n	80027f4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027cc:	f7ff fbd8 	bl	8001f80 <HAL_RCC_GetPCLK2Freq>
 80027d0:	61b8      	str	r0, [r7, #24]
        break;
 80027d2:	e00f      	b.n	80027f4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <UART_SetConfig+0x3a8>)
 80027d6:	61bb      	str	r3, [r7, #24]
        break;
 80027d8:	e00c      	b.n	80027f4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027da:	f7ff fb39 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 80027de:	61b8      	str	r0, [r7, #24]
        break;
 80027e0:	e008      	b.n	80027f4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027e6:	61bb      	str	r3, [r7, #24]
        break;
 80027e8:	e004      	b.n	80027f4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	77bb      	strb	r3, [r7, #30]
        break;
 80027f2:	bf00      	nop
    }

    if (pclk != 0U)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d018      	beq.n	800282c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	085a      	lsrs	r2, r3, #1
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	441a      	add	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	b29b      	uxth	r3, r3
 800280e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b0f      	cmp	r3, #15
 8002814:	d908      	bls.n	8002828 <UART_SetConfig+0x38c>
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d204      	bcs.n	8002828 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	e001      	b.n	800282c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002838:	7fbb      	ldrb	r3, [r7, #30]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	007a1200 	.word	0x007a1200

08002848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01a      	beq.n	800295e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002946:	d10a      	bne.n	800295e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]
  }
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af02      	add	r7, sp, #8
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800299c:	f7fd ff18 	bl	80007d0 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d10e      	bne.n	80029ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f82d 	bl	8002a1e <UART_WaitOnFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e023      	b.n	8002a16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d10e      	bne.n	80029fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f817 	bl	8002a1e <UART_WaitOnFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e00d      	b.n	8002a16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b09c      	sub	sp, #112	; 0x70
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a2e:	e0a5      	b.n	8002b7c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a36:	f000 80a1 	beq.w	8002b7c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7fd fec9 	bl	80007d0 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <UART_WaitOnFlagUntilTimeout+0x32>
 8002a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d13e      	bne.n	8002ace <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a58:	e853 3f00 	ldrex	r3, [r3]
 8002a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a64:	667b      	str	r3, [r7, #100]	; 0x64
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a76:	e841 2300 	strex	r3, r2, [r1]
 8002a7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1e6      	bne.n	8002a50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3308      	adds	r3, #8
 8002a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8c:	e853 3f00 	ldrex	r3, [r3]
 8002a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	663b      	str	r3, [r7, #96]	; 0x60
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002aa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8002aa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aaa:	e841 2300 	strex	r3, r2, [r1]
 8002aae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1e5      	bne.n	8002a82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e067      	b.n	8002b9e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d04f      	beq.n	8002b7c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aea:	d147      	bne.n	8002b7c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002af4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	e853 3f00 	ldrex	r3, [r3]
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
 8002b16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b1c:	e841 2300 	strex	r3, r2, [r1]
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e6      	bne.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	e853 3f00 	ldrex	r3, [r3]
 8002b36:	613b      	str	r3, [r7, #16]
   return(result);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3308      	adds	r3, #8
 8002b46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b48:	623a      	str	r2, [r7, #32]
 8002b4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4c:	69f9      	ldr	r1, [r7, #28]
 8002b4e:	6a3a      	ldr	r2, [r7, #32]
 8002b50:	e841 2300 	strex	r3, r2, [r1]
 8002b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e5      	bne.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e010      	b.n	8002b9e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4013      	ands	r3, r2
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	f43f af4a 	beq.w	8002a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3770      	adds	r7, #112	; 0x70
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <_ZdlPvj>:
 8002ba6:	f000 b800 	b.w	8002baa <_ZdlPv>

08002baa <_ZdlPv>:
 8002baa:	f000 b825 	b.w	8002bf8 <free>
	...

08002bb0 <__libc_init_array>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	4d0d      	ldr	r5, [pc, #52]	; (8002be8 <__libc_init_array+0x38>)
 8002bb4:	4c0d      	ldr	r4, [pc, #52]	; (8002bec <__libc_init_array+0x3c>)
 8002bb6:	1b64      	subs	r4, r4, r5
 8002bb8:	10a4      	asrs	r4, r4, #2
 8002bba:	2600      	movs	r6, #0
 8002bbc:	42a6      	cmp	r6, r4
 8002bbe:	d109      	bne.n	8002bd4 <__libc_init_array+0x24>
 8002bc0:	4d0b      	ldr	r5, [pc, #44]	; (8002bf0 <__libc_init_array+0x40>)
 8002bc2:	4c0c      	ldr	r4, [pc, #48]	; (8002bf4 <__libc_init_array+0x44>)
 8002bc4:	f000 f886 	bl	8002cd4 <_init>
 8002bc8:	1b64      	subs	r4, r4, r5
 8002bca:	10a4      	asrs	r4, r4, #2
 8002bcc:	2600      	movs	r6, #0
 8002bce:	42a6      	cmp	r6, r4
 8002bd0:	d105      	bne.n	8002bde <__libc_init_array+0x2e>
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd8:	4798      	blx	r3
 8002bda:	3601      	adds	r6, #1
 8002bdc:	e7ee      	b.n	8002bbc <__libc_init_array+0xc>
 8002bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be2:	4798      	blx	r3
 8002be4:	3601      	adds	r6, #1
 8002be6:	e7f2      	b.n	8002bce <__libc_init_array+0x1e>
 8002be8:	08002d34 	.word	0x08002d34
 8002bec:	08002d34 	.word	0x08002d34
 8002bf0:	08002d34 	.word	0x08002d34
 8002bf4:	08002d38 	.word	0x08002d38

08002bf8 <free>:
 8002bf8:	4b02      	ldr	r3, [pc, #8]	; (8002c04 <free+0xc>)
 8002bfa:	4601      	mov	r1, r0
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	f000 b80b 	b.w	8002c18 <_free_r>
 8002c02:	bf00      	nop
 8002c04:	2000000c 	.word	0x2000000c

08002c08 <memset>:
 8002c08:	4402      	add	r2, r0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d100      	bne.n	8002c12 <memset+0xa>
 8002c10:	4770      	bx	lr
 8002c12:	f803 1b01 	strb.w	r1, [r3], #1
 8002c16:	e7f9      	b.n	8002c0c <memset+0x4>

08002c18 <_free_r>:
 8002c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c1a:	2900      	cmp	r1, #0
 8002c1c:	d048      	beq.n	8002cb0 <_free_r+0x98>
 8002c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c22:	9001      	str	r0, [sp, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f1a1 0404 	sub.w	r4, r1, #4
 8002c2a:	bfb8      	it	lt
 8002c2c:	18e4      	addlt	r4, r4, r3
 8002c2e:	f000 f843 	bl	8002cb8 <__malloc_lock>
 8002c32:	4a20      	ldr	r2, [pc, #128]	; (8002cb4 <_free_r+0x9c>)
 8002c34:	9801      	ldr	r0, [sp, #4]
 8002c36:	6813      	ldr	r3, [r2, #0]
 8002c38:	4615      	mov	r5, r2
 8002c3a:	b933      	cbnz	r3, 8002c4a <_free_r+0x32>
 8002c3c:	6063      	str	r3, [r4, #4]
 8002c3e:	6014      	str	r4, [r2, #0]
 8002c40:	b003      	add	sp, #12
 8002c42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c46:	f000 b83d 	b.w	8002cc4 <__malloc_unlock>
 8002c4a:	42a3      	cmp	r3, r4
 8002c4c:	d90b      	bls.n	8002c66 <_free_r+0x4e>
 8002c4e:	6821      	ldr	r1, [r4, #0]
 8002c50:	1862      	adds	r2, r4, r1
 8002c52:	4293      	cmp	r3, r2
 8002c54:	bf04      	itt	eq
 8002c56:	681a      	ldreq	r2, [r3, #0]
 8002c58:	685b      	ldreq	r3, [r3, #4]
 8002c5a:	6063      	str	r3, [r4, #4]
 8002c5c:	bf04      	itt	eq
 8002c5e:	1852      	addeq	r2, r2, r1
 8002c60:	6022      	streq	r2, [r4, #0]
 8002c62:	602c      	str	r4, [r5, #0]
 8002c64:	e7ec      	b.n	8002c40 <_free_r+0x28>
 8002c66:	461a      	mov	r2, r3
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	b10b      	cbz	r3, 8002c70 <_free_r+0x58>
 8002c6c:	42a3      	cmp	r3, r4
 8002c6e:	d9fa      	bls.n	8002c66 <_free_r+0x4e>
 8002c70:	6811      	ldr	r1, [r2, #0]
 8002c72:	1855      	adds	r5, r2, r1
 8002c74:	42a5      	cmp	r5, r4
 8002c76:	d10b      	bne.n	8002c90 <_free_r+0x78>
 8002c78:	6824      	ldr	r4, [r4, #0]
 8002c7a:	4421      	add	r1, r4
 8002c7c:	1854      	adds	r4, r2, r1
 8002c7e:	42a3      	cmp	r3, r4
 8002c80:	6011      	str	r1, [r2, #0]
 8002c82:	d1dd      	bne.n	8002c40 <_free_r+0x28>
 8002c84:	681c      	ldr	r4, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	6053      	str	r3, [r2, #4]
 8002c8a:	4421      	add	r1, r4
 8002c8c:	6011      	str	r1, [r2, #0]
 8002c8e:	e7d7      	b.n	8002c40 <_free_r+0x28>
 8002c90:	d902      	bls.n	8002c98 <_free_r+0x80>
 8002c92:	230c      	movs	r3, #12
 8002c94:	6003      	str	r3, [r0, #0]
 8002c96:	e7d3      	b.n	8002c40 <_free_r+0x28>
 8002c98:	6825      	ldr	r5, [r4, #0]
 8002c9a:	1961      	adds	r1, r4, r5
 8002c9c:	428b      	cmp	r3, r1
 8002c9e:	bf04      	itt	eq
 8002ca0:	6819      	ldreq	r1, [r3, #0]
 8002ca2:	685b      	ldreq	r3, [r3, #4]
 8002ca4:	6063      	str	r3, [r4, #4]
 8002ca6:	bf04      	itt	eq
 8002ca8:	1949      	addeq	r1, r1, r5
 8002caa:	6021      	streq	r1, [r4, #0]
 8002cac:	6054      	str	r4, [r2, #4]
 8002cae:	e7c7      	b.n	8002c40 <_free_r+0x28>
 8002cb0:	b003      	add	sp, #12
 8002cb2:	bd30      	pop	{r4, r5, pc}
 8002cb4:	200000a0 	.word	0x200000a0

08002cb8 <__malloc_lock>:
 8002cb8:	4801      	ldr	r0, [pc, #4]	; (8002cc0 <__malloc_lock+0x8>)
 8002cba:	f000 b809 	b.w	8002cd0 <__retarget_lock_acquire_recursive>
 8002cbe:	bf00      	nop
 8002cc0:	20000130 	.word	0x20000130

08002cc4 <__malloc_unlock>:
 8002cc4:	4801      	ldr	r0, [pc, #4]	; (8002ccc <__malloc_unlock+0x8>)
 8002cc6:	f000 b804 	b.w	8002cd2 <__retarget_lock_release_recursive>
 8002cca:	bf00      	nop
 8002ccc:	20000130 	.word	0x20000130

08002cd0 <__retarget_lock_acquire_recursive>:
 8002cd0:	4770      	bx	lr

08002cd2 <__retarget_lock_release_recursive>:
 8002cd2:	4770      	bx	lr

08002cd4 <_init>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	bf00      	nop
 8002cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cda:	bc08      	pop	{r3}
 8002cdc:	469e      	mov	lr, r3
 8002cde:	4770      	bx	lr

08002ce0 <_fini>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	bf00      	nop
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr
